generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id               Int                @id @default(autoincrement())
  first_name       String
  last_name        String
  email            String             @unique
  password         String
  phone            String
  address          String
  joined_at        DateTime           @default(now())
  user_events      Json
  Store            Store[]
  Customer         Customer[]
  DarazOrder       DarazOrder[]
  DarazTransaction DarazTransaction[]
  TemporaryData    TemporaryData[]
  Category         Category[]
  Product          Product[]
  Variant          Variant[]
  VariantOnStores  VariantOnStores[]
  Warehouse        Warehouse[]
  Inventory        Inventory[]
}

model Store {
  seller_id       String            @id
  name            String
  platform        String
  image_url       String
  connected_at    DateTime          @default(now())
  store_info      Json
  user            User              @relation(fields: [user_id], references: [id])
  user_id         Int
  VariantOnStores VariantOnStores[]
}

model Customer {
  id         String       @id
  shopify_id String?
  first_name String
  last_name  String
  email      String
  city       String
  province   String
  country    String
  user       User         @relation(fields: [user_id], references: [id])
  user_id    Int
  DarazOrder DarazOrder[]
}

model DarazOrder {
  order_id                       String             @id
  seller_id                      String
  shop_skus                      String
  voucher_platform               String
  voucher                        String
  voucher_seller                 String
  order_number                   String
  created_at                     DateTime
  voucher_code                   String
  gift_option                    String
  shipping_fee_discount_platform Float
  promised_shipping_times        String
  updated_at                     DateTime
  price                          Float
  shipping_fee_original          Float
  payment_method                 String
  shipping_fee_discount_seller   Float
  shipping_fee                   Float
  items_count                    Int
  payment_status                 Boolean
  statuses                       String
  is_received                    Boolean
  gift_message                   String
  remarks                        String
  order_items                    Json
  shipping_address               Json
  billing_address                Json
  transactions_amount            Float
  user                           User               @relation(fields: [user_id], references: [id])
  user_id                        Int
  customer                       Customer           @relation(fields: [customer_id], references: [id])
  customer_id                    String
  DarazTransaction               DarazTransaction[]
}

model DarazTransaction {
  id                 String     @id
  seller_id          String
  order_number       String
  order_item_status  String
  amount             String
  transaction_date   DateTime
  transaction_type   String
  statement          String
  payment_ref_id     String
  fee_name           String
  paid_status        String
  WHT_amount         String
  VAT_in_amount      String
  transaction_number String
  comment            String
  user               User       @relation(fields: [user_id], references: [id])
  user_id            Int
  daraz_order        DarazOrder @relation(fields: [order_number], references: [order_id])
}

model TemporaryData {
  id        Int      @id @default(autoincrement())
  email     String
  createdAt DateTime @default(now())
  data      Json
  user      User     @relation(fields: [user_id], references: [id])
  user_id   Int
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  user    User      @relation(fields: [user_id], references: [id])
  user_id Int
  Product Product[]
}

model Product {
  id                    Int       @id @default(autoincrement())
  name                  String
  image_url             String
  description           String
  created_at            DateTime  @default(now())
  updated_at            DateTime?
  category              Category  @relation(fields: [category_id], references: [id])
  category_id           Int
  user                  User      @relation(fields: [user_id], references: [id])
  user_id               Int
  packing_material_cost Float
  Variant               Variant[]
}

model Variant {
  id              Int               @id @default(autoincrement())
  name            String
  sku             String
  cost            Float
  image_url       String
  product         Product           @relation(fields: [product_id], references: [id])
  product_id      Int
  user            User              @relation(fields: [user_id], references: [id])
  user_id         Int
  VariantOnStores VariantOnStores[]
  Inventory       Inventory[]
}

model VariantOnStores {
  id               Int       @id @default(autoincrement())
  variant          Variant   @relation(fields: [variant_id], references: [id])
  variant_id       Int
  status           String
  store            Store     @relation(fields: [store_id], references: [seller_id])
  store_id         String
  daraz_shop_sku   String
  price            Float
  sale_price       Float
  deduction_unit   Float
  created_at       DateTime  @default(now())
  updated_at       DateTime?
  platform_details Json
  sku_id           String
  seller_sku       String
  user             User      @relation(fields: [user_id], references: [id])
  user_id          Int
}

model Warehouse {
  id        Int         @id @default(autoincrement())
  name      String
  user      User        @relation(fields: [user_id], references: [id])
  user_id   Int
  Inventory Inventory[]
}

model Inventory {
  id           Int       @id @default(autoincrement())
  variant      Variant   @relation(fields: [variant_id], references: [id])
  variant_id   Int
  quantity     Int
  units        String
  user         User      @relation(fields: [user_id], references: [id])
  user_id      Int
  warehouse    Warehouse @relation(fields: [warehouse_id], references: [id])
  warehouse_id Int
}
